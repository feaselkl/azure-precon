{
	"name": "N001 - The Basics of Python",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "08962f62-d975-4df8-9012-57e1bdc6db62"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# The Basics of Python and Notebooks\r\n",
					"\r\n",
					"Although you might not always use notebooks to execute code in Spark, this is an easy way to get started and try things out.\r\n",
					"\r\n",
					"In Synapse, you can create two separate blocks:  **Code** blocks and **Markdown** blocks.  This is a markdown block, allowing us to include text, images, links, and other resources to help explain the code."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import sum, avg, max, count"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"source": [
					"x = 1\r\n",
					"y = 2\r\n",
					"x + y"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"This is a message.\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Here is how we create a function:  the `def` keyword.  We take in parameters but do not need to define types."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def add_two_numbers(a, b):\r\n",
					"    a+b"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Let's try the function and see what happens."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"add_two_numbers(3,6)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"The reason that we don't get any results back is that we need to use the `return` keyword."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def add_two_numbers(a, b):\r\n",
					"    return a+b"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"add_two_numbers(3,6)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Creating Data\r\n",
					"\r\n",
					"Let's create some basic data."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data1 = ((\"Bob\", \"IT\", 4500), \\\r\n",
					"(\"Maria\", \"IT\", 4600),  \\\r\n",
					"(\"James\", \"IT\", 3850),   \\\r\n",
					"(\"Maria\", \"HR\", 4500),  \\\r\n",
					"(\"James\", \"IT\", 4500),    \\\r\n",
					"(\"Sam\", \"HR\", 3300),  \\\r\n",
					"(\"Jen\", \"HR\", 3900),    \\\r\n",
					"(\"Jeff\", \"Marketing\", 4500), \\\r\n",
					"(\"Anand\", \"Marketing\", 2000),\\\r\n",
					"(\"Shaid\", \"IT\", 3850) \\\r\n",
					")\r\n",
					"\r\n",
					"col = [\"Name\", \"Role\", \"MonthlyIncome\"]\r\n",
					"b = spark.createDataFrame(data1,col)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Calling the variable describes the DataFrame."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"b"
				],
				"execution_count": 17
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"If we want to view the data, we need to perform an action using the `show()` command."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"b.show()"
				],
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"We can also perform transformations.  Note, however, that these do not run immediately.  Transformations are **lazy**, meaning we only perform the transformations after an action like `show()`."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"b2 = b.groupBy(\"Role\").agg(\r\n",
					"        sum(\"MonthlyIncome\").alias(\"IncomeSum\"), \\\r\n",
					"        avg(\"MonthlyIncome\").alias(\"IncomeAvg\"), \\\r\n",
					"        count(\"MonthlyIncome\").alias(\"NumEmployees\")\r\n",
					")"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"b2.show()"
				],
				"execution_count": 28
			}
		]
	}
}